# -*- coding: utf-8 -*-
"""HillClimb.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kOn-C0xN_88uSfsizG_cTCSeH5n81l1g
"""
import math
import random

#initialization
maxcount = 100
bitcount = 40
finalresult = []
iteration = 0
max_fitness = 0

def calculate_fitness(binary):
  ones = binary.count("1")
  fitness = (abs(13 * ones - 170)) #using fitness function to calculate fitness
  return fitness

def setbit(v,i):
  shift = 1 << i #left shift
  return (v ^ shift) #returns int type

def compare(current_v, current_f, next_v, next_f): #compare and use the fittest value
  if current_f < next_f:
    return next_v,next_f
  else:
    return current_v,current_f
    

def hillclimb (v_int):
  current_v = bin(v_int)[2:] #changes current interger value into binary
  current_f = calculate_fitness(current_v) #finds fitness
  for i in range(40): #loop for the 40bit value
    neighbor = setbit(v_int,i) #finding neighbor with left shift
    next_v = bin(neighbor)[2:] #changes into binary 
    next_f = calculate_fitness(next_v) #finds fitness
    current_v,current_f = compare(current_v, current_f, next_v, next_f)  #makes a comparision
  return(current_v, current_f) #returns the fittest


for i in range (0,100): #goes from 0 through 99 -> 100 iteration
  localresult = []
  v_int = random.getrandbits(40) #for random number generation -> gives int value
  v_bool = bin(v_int)[2:] #converting into boolean value
  for i in range (40):
    current_v, max_fitness = hillclimb(v_int) 
    v_int = int (current_v, 2) #convert the obtained boolean to int for next execution
    localresult.append(max_fitness) #append the local maximum fitness score to the array 
  print (localresult);
  finalresult.append(max(localresult))
  
    
# file write for output
file = open('output.txt', 'w')
file.write("%s " %finalresult)
file.close()
